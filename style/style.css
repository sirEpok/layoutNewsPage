html {
    box-sizing: border-box; /*Это свойство применяется для изменения алгоритма расчета ширины и высоты элемента, в данном случае: ширина и высота = значения полей + границ (без учета margin)*/   
}

*,
*::before,
*::after {
    box-sizing: inherit; /*Применяется для изменения aлгоритма расчета ширины и высоты элемента, inherit - наследует значение родителя*/
}

body {
    min-width: 1000px; /*Минимальная ширина для элемента body. Если окно браузера по ширине становится меньше заданной минимальной ширины элемента, то ширина элемента остается неизменной, а в окне появляется горизонтальная полоса прокрутки.*/
    margin: 0; /*Устанавливает величину отступа от края элемента до родительского элемента*/
    background-color: #f9f9f9; /*Устанавливает цвет заднему фону, бело-серый, ближе к белому*/
    font-family: "Arial", sans-serif; /*Устанавливает для всего документа шрифт Arial*/
    font-size: 16px; /*размер шрифта в пикселях*/
    line-height: 1.5; /*Устанавливает межстрочный интервал текста. Взял 1.5 как самое популярное значение, но в верстке google видел 1.57, но google, наверно, не эталон))*/
    color: #000000; /*Цвет шрифта*/
}

body.modal-active {
    overflow: auto; /*Свойство overflow управляет отображением содержания блочного элемента, если оно целиком не помещается и выходит за область заданных размеров. Hidden - Отображается только область внутри элемента, остальное будет скрыто.*/
}

img {
    max-width: 100%; /*Максимальная ширина для картинки 100%. Во всю ширину блока родителя*/
}

a {
    text-decoration: none; /*Отменяет все эффекты для текста, также подчеркивания у ссылок, которое задано по умолчанию.*/
    color: inherit; /*Цвет текста ссылки наследуется от родительского элемента*/
}

.visually-hidden {
	position: absolute !important; /*Указывает, что элемент абсолютно позиционирован, при этом другие элементы отображаются на веб-странице словно абсолютно позиционированного элемента и нет. !important - позволяет повысить приоритет стиля*/
	clip: rect(1px 1px 1px 1px); /* IE6, IE7 Свойство clip определяет область позиционированного элемента, в которой будет показано его содержимое. Все, что не помещается в эту область, будет обрезано и становится невидимым.*/
	clip: rect(1px, 1px, 1px, 1px); /*Свойство clip определяет область позиционированного элемента, в которой будет показано его содержимое. Все, что не помещается в эту область, будет обрезано и становится невидимым.*/
	padding:0 !important; /*Расстояние между элементом и границы border блока.*/
	border:0 !important; /*Граница вокруг элемента*/
	height: 1px !important; /*Высота 1 px, важное свойство - в приоритете*/
	width: 1px !important; /*Ширина 1 px, важное свойство - в приоритете*/
	overflow: hidden; /*Свойство overflow управляет отображением содержания блочного элемента, если оно целиком не помещается и выходит за область заданных размеров. Hidden - Отображается только область внутри элемента, остальное будет скрыто.*/
}

.clearfix::after { /*Насколько я понял, этот класс нужен для того, чтобы при добавлении новых новостей на странице(либо другого контента), не сбивались блоки в верстке*/
    content: ""; /*Свойство content позволяет вставлять генерируемое содержание в текст веб-страницы, которое первоначально в тексте отсутствует. Применяется совместно с псевдоэлементами :after и :before, они соответственно указывают отображать новое содержимое после или до элемента, к которому добавляются. Пустые кавычки, текст который должен добавляться на веб-страницу, пустота расценивается как строка*/
    display: table;/*Определяет, что элемент является блочной таблицей подобно использованию тега <table>.*/
    clear: both;/*Устанавливает, с какой стороны элемента запрещено его обтекание другими элементами. Отменяет обтекание элемента одновременно с правого и левого края. Это значение рекомендуется устанавливать, когда требуется снять обтекание элемента, но неизвестно точно с какой стороны.*/
}

.fixed-container {
    width: 1000px;/*Ширина контейнера центровщика 1000px*/
    margin: 0 auto;/*Выравнивает блок по центру*/
}